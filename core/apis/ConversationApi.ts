/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Conversation,
    ConversationFromJSON,
    ConversationToJSON,
    ConversationMessages,
    ConversationMessagesFromJSON,
    ConversationMessagesToJSON,
    ConversationSummarizeInput,
    ConversationSummarizeInputFromJSON,
    ConversationSummarizeInputToJSON,
    ConversationSummarizeOutput,
    ConversationSummarizeOutputFromJSON,
    ConversationSummarizeOutputToJSON,
    SeededScoreIncrement,
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
} from '../models';

export interface ConversationAssociateAnchorRequest {
    conversation: string;
    anchor: string;
}

export interface ConversationAssociateAssetRequest {
    conversation: string;
    asset: string;
}

export interface ConversationAssociateWebsiteRequest {
    conversation: string;
    website: string;
}

export interface ConversationDisassociateAnchorRequest {
    conversation: string;
    anchor: string;
}

export interface ConversationDisassociateAssetRequest {
    conversation: string;
    asset: string;
}

export interface ConversationDisassociateWebsiteRequest {
    conversation: string;
    website: string;
}

export interface ConversationGetSpecificConversationRequest {
    conversation: string;
    transferables?: boolean;
}

export interface ConversationGroundingMessagesAssociateMessageRequest {
    conversation: string;
    message: string;
}

export interface ConversationGroundingMessagesDisassociateMessageRequest {
    conversation: string;
    message: string;
}

export interface ConversationScoresIncrementRequest {
    conversation: string;
    seededScoreIncrement?: SeededScoreIncrement;
}

export interface ConversationSpecificConversationMessagesRequest {
    conversation: string;
    transferables?: boolean;
}

export interface ConversationSpecificConversationRenameRequest {
    conversation: string;
    transferables?: boolean;
}

export interface ConversationSummarizeRequest {
    conversation: string;
    conversationSummarizeInput?: ConversationSummarizeInput;
}

export interface ConversationUpdateRequest {
    transferables?: boolean;
    conversation?: Conversation;
}

/**
 * 
 */
export class ConversationApi extends runtime.BaseAPI {

    /**
     * This will update both the anchor and the conversation.  and associate the 2 together
     * /conversation/{conversation}/anchors/associate/{anchor} [POST]
     */
    async conversationAssociateAnchorRaw(requestParameters: ConversationAssociateAnchorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateAnchor.');
        }

        if (requestParameters.anchor === null || requestParameters.anchor === undefined) {
            throw new runtime.RequiredError('anchor','Required parameter requestParameters.anchor was null or undefined when calling conversationAssociateAnchor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/anchors/associate/{anchor}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the anchor and the conversation.  and associate the 2 together
     * /conversation/{conversation}/anchors/associate/{anchor} [POST]
     */
    async conversationAssociateAnchor(requestParameters: ConversationAssociateAnchorRequest): Promise<void> {
        await this.conversationAssociateAnchorRaw(requestParameters);
    }

    /**
     * This will update both the asset and the conversation.  and associate the 2 together
     * /conversation/{conversation}/assets/associate/{asset} [POST]
     */
    async conversationAssociateAssetRaw(requestParameters: ConversationAssociateAssetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateAsset.');
        }

        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset','Required parameter requestParameters.asset was null or undefined when calling conversationAssociateAsset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/assets/associate/{asset}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the asset and the conversation.  and associate the 2 together
     * /conversation/{conversation}/assets/associate/{asset} [POST]
     */
    async conversationAssociateAsset(requestParameters: ConversationAssociateAssetRequest): Promise<void> {
        await this.conversationAssociateAssetRaw(requestParameters);
    }

    /**
     * This will update both the website and the conversation.  and associate the 2 together
     * /conversation/{conversation}/websites/associate/{website} [POST]
     */
    async conversationAssociateWebsiteRaw(requestParameters: ConversationAssociateWebsiteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateWebsite.');
        }

        if (requestParameters.website === null || requestParameters.website === undefined) {
            throw new runtime.RequiredError('website','Required parameter requestParameters.website was null or undefined when calling conversationAssociateWebsite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/websites/associate/{website}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the website and the conversation.  and associate the 2 together
     * /conversation/{conversation}/websites/associate/{website} [POST]
     */
    async conversationAssociateWebsite(requestParameters: ConversationAssociateWebsiteRequest): Promise<void> {
        await this.conversationAssociateWebsiteRaw(requestParameters);
    }

    /**
     * This will update both the anchor and the conversation.  and delete(disassociate) the 2 together
     * /conversation/{conversation}/anchors/delete/{anchor} [POST]
     */
    async conversationDisassociateAnchorRaw(requestParameters: ConversationDisassociateAnchorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationDisassociateAnchor.');
        }

        if (requestParameters.anchor === null || requestParameters.anchor === undefined) {
            throw new runtime.RequiredError('anchor','Required parameter requestParameters.anchor was null or undefined when calling conversationDisassociateAnchor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/anchors/delete/{anchor}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the anchor and the conversation.  and delete(disassociate) the 2 together
     * /conversation/{conversation}/anchors/delete/{anchor} [POST]
     */
    async conversationDisassociateAnchor(requestParameters: ConversationDisassociateAnchorRequest): Promise<void> {
        await this.conversationDisassociateAnchorRaw(requestParameters);
    }

    /**
     * This will update both the asset and the conversation.  and delete(disassociate) the 2.
     * /conversation/{conversation}/assets/delete/{asset} [POST]
     */
    async conversationDisassociateAssetRaw(requestParameters: ConversationDisassociateAssetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationDisassociateAsset.');
        }

        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset','Required parameter requestParameters.asset was null or undefined when calling conversationDisassociateAsset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/assets/delete/{asset}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the asset and the conversation.  and delete(disassociate) the 2.
     * /conversation/{conversation}/assets/delete/{asset} [POST]
     */
    async conversationDisassociateAsset(requestParameters: ConversationDisassociateAssetRequest): Promise<void> {
        await this.conversationDisassociateAssetRaw(requestParameters);
    }

    /**
     * This will enable us to dissassociate a conversation from a website.
     * /website/{website}/websites/disassociate/{website} [POST]
     */
    async conversationDisassociateWebsiteRaw(requestParameters: ConversationDisassociateWebsiteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationDisassociateWebsite.');
        }

        if (requestParameters.website === null || requestParameters.website === undefined) {
            throw new runtime.RequiredError('website','Required parameter requestParameters.website was null or undefined when calling conversationDisassociateWebsite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/websites/disassociate/{website}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to dissassociate a conversation from a website.
     * /website/{website}/websites/disassociate/{website} [POST]
     */
    async conversationDisassociateWebsite(requestParameters: ConversationDisassociateWebsiteRequest): Promise<void> {
        await this.conversationDisassociateWebsiteRaw(requestParameters);
    }

    /**
     * This will get a specific conversation.
     * /conversation/{conversation} [GET]
     */
    async conversationGetSpecificConversationRaw(requestParameters: ConversationGetSpecificConversationRequest): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationGetSpecificConversation.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * This will get a specific conversation.
     * /conversation/{conversation} [GET]
     */
    async conversationGetSpecificConversation(requestParameters: ConversationGetSpecificConversationRequest): Promise<Conversation> {
        const response = await this.conversationGetSpecificConversationRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will save the grounding context for a conversation. This will enable us to associate a message to the conversation.grounding object.
     * /conversation/{conversation}/grounding/messages/associate/{message} [POST]
     */
    async conversationGroundingMessagesAssociateMessageRaw(requestParameters: ConversationGroundingMessagesAssociateMessageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationGroundingMessagesAssociateMessage.');
        }

        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message','Required parameter requestParameters.message was null or undefined when calling conversationGroundingMessagesAssociateMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/grounding/messages/associate/{message}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will save the grounding context for a conversation. This will enable us to associate a message to the conversation.grounding object.
     * /conversation/{conversation}/grounding/messages/associate/{message} [POST]
     */
    async conversationGroundingMessagesAssociateMessage(requestParameters: ConversationGroundingMessagesAssociateMessageRequest): Promise<void> {
        await this.conversationGroundingMessagesAssociateMessageRaw(requestParameters);
    }

    /**
     * This will remove specific grounding context for a conversation. This will enable us to dissassociate a message from the conversation.grounding object.
     * /conversation/{conversation}/grounding/messages/disassociate/{message} [POST]
     */
    async conversationGroundingMessagesDisassociateMessageRaw(requestParameters: ConversationGroundingMessagesDisassociateMessageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationGroundingMessagesDisassociateMessage.');
        }

        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message','Required parameter requestParameters.message was null or undefined when calling conversationGroundingMessagesDisassociateMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/grounding/messages/disassociate/{message}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will remove specific grounding context for a conversation. This will enable us to dissassociate a message from the conversation.grounding object.
     * /conversation/{conversation}/grounding/messages/disassociate/{message} [POST]
     */
    async conversationGroundingMessagesDisassociateMessage(requestParameters: ConversationGroundingMessagesDisassociateMessageRequest): Promise<void> {
        await this.conversationGroundingMessagesDisassociateMessageRaw(requestParameters);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/conversation/{conversation}/scores/increment\' [POST]
     */
    async conversationScoresIncrementRaw(requestParameters: ConversationScoresIncrementRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationScoresIncrement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversation/{conversation}/scores/increment`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters.seededScoreIncrement),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/conversation/{conversation}/scores/increment\' [POST]
     */
    async conversationScoresIncrement(requestParameters: ConversationScoresIncrementRequest): Promise<void> {
        await this.conversationScoresIncrementRaw(requestParameters);
    }

    /**
     * This will get a specific conversations messages
     * /conversation/{conversation}/messages [GET]
     */
    async conversationSpecificConversationMessagesRaw(requestParameters: ConversationSpecificConversationMessagesRequest): Promise<runtime.ApiResponse<ConversationMessages>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationSpecificConversationMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/messages`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationMessagesFromJSON(jsonValue));
    }

    /**
     * This will get a specific conversations messages
     * /conversation/{conversation}/messages [GET]
     */
    async conversationSpecificConversationMessages(requestParameters: ConversationSpecificConversationMessagesRequest): Promise<ConversationMessages> {
        const response = await this.conversationSpecificConversationMessagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will take a specific converssation and it will rename using ML.
     * /conversation/{conversation}/rename [POST]
     */
    async conversationSpecificConversationRenameRaw(requestParameters: ConversationSpecificConversationRenameRequest): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationSpecificConversationRename.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/rename`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * This will take a specific converssation and it will rename using ML.
     * /conversation/{conversation}/rename [POST]
     */
    async conversationSpecificConversationRename(requestParameters: ConversationSpecificConversationRenameRequest): Promise<Conversation> {
        const response = await this.conversationSpecificConversationRenameRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will take a current conversation and create a summary of the conversation and save it as an annotation on the conversation.  will return the annotation reference used as the summary.
     * /conversation/{conversation}/summarize [POST]
     */
    async conversationSummarizeRaw(requestParameters: ConversationSummarizeRequest): Promise<runtime.ApiResponse<ConversationSummarizeOutput>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationSummarize.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversation/{conversation}/summarize`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationSummarizeInputToJSON(requestParameters.conversationSummarizeInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationSummarizeOutputFromJSON(jsonValue));
    }

    /**
     * This will take a current conversation and create a summary of the conversation and save it as an annotation on the conversation.  will return the annotation reference used as the summary.
     * /conversation/{conversation}/summarize [POST]
     */
    async conversationSummarize(requestParameters: ConversationSummarizeRequest): Promise<ConversationSummarizeOutput> {
        const response = await this.conversationSummarizeRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update a specific conversation.
     * /conversation/update [POST]
     */
    async conversationUpdateRaw(requestParameters: ConversationUpdateRequest): Promise<runtime.ApiResponse<Conversation>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversation/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationToJSON(requestParameters.conversation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * This will update a specific conversation.
     * /conversation/update [POST]
     */
    async conversationUpdate(requestParameters: ConversationUpdateRequest): Promise<Conversation> {
        const response = await this.conversationUpdateRaw(requestParameters);
        return await response.value();
    }

}

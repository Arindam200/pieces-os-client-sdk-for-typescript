/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { UserProfile } from "../models";
import { Cloud } from "../models/Cloud";
import { Clouds } from "../models/Clouds";
export interface CloudsConnectNewCloudRequest {
    userProfile?: UserProfile;
}
export interface CloudsDisconnectCloudRequest {
    cloud?: Cloud;
}
export interface CloudsReconnectCloudRequest {
    cloud?: Cloud;
}
/**
 *
 */
export declare class CloudsApi extends runtime.BaseAPI {
    /**
     * This will attempt to connect to a specific users cloud.(Required that the current user is logged in.)
     * /clouds/connect [POST]
     */
    cloudsConnectNewCloudRaw(requestParameters: CloudsConnectNewCloudRequest): Promise<runtime.ApiResponse<Cloud>>;
    /**
     * This will attempt to connect to a specific users cloud.(Required that the current user is logged in.)
     * /clouds/connect [POST]
     */
    cloudsConnectNewCloud(requestParameters: CloudsConnectNewCloudRequest): Promise<Cloud>;
    /**
     * This will attempt to disconnect to a specific users cloud.
     * /clouds/disconnect [POST]
     */
    cloudsDisconnectCloudRaw(requestParameters: CloudsDisconnectCloudRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * This will attempt to disconnect to a specific users cloud.
     * /clouds/disconnect [POST]
     */
    cloudsDisconnectCloud(requestParameters: CloudsDisconnectCloudRequest): Promise<string>;
    /**
     * This will attempt to reconnect to a users cloud. This will ensure that we are connected to a users cloud and will ensure that all the data associated with a user\'s cloud is up-to-date.
     * /clouds/reconnect [POST]
     */
    cloudsReconnectCloudRaw(requestParameters: CloudsReconnectCloudRequest): Promise<runtime.ApiResponse<Cloud>>;
    /**
     * This will attempt to reconnect to a users cloud. This will ensure that we are connected to a users cloud and will ensure that all the data associated with a user\'s cloud is up-to-date.
     * /clouds/reconnect [POST]
     */
    cloudsReconnectCloud(requestParameters: CloudsReconnectCloudRequest): Promise<Cloud>;
    /**
     * This is going to get a snapshot of all of the connected clouds.
     * /clouds [GET]
     */
    cloudsSnapshotRaw(): Promise<runtime.ApiResponse<Clouds>>;
    /**
     * This is going to get a snapshot of all of the connected clouds.
     * /clouds [GET]
     */
    cloudsSnapshot(): Promise<Clouds>;
}

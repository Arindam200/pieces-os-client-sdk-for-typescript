/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SeededScoreIncrement,
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
    Tag,
    TagFromJSON,
    TagToJSON,
} from '../models';

export interface TagScoresIncrementRequest {
    tag: string;
    seededScoreIncrement?: SeededScoreIncrement;
}

export interface TagUpdateRequest {
    transferables?: boolean;
    tag?: Tag;
}

export interface TagsSpecificTagSnapshotRequest {
    tag: string;
    transferables?: boolean;
}

/**
 * 
 */
export class TagApi extends runtime.BaseAPI {

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/tag/{tag}/scores/increment\' [POST]
     */
    async tagScoresIncrementRaw(requestParameters: TagScoresIncrementRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling tagScoresIncrement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tag/{tag}/scores/increment`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters.seededScoreIncrement),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/tag/{tag}/scores/increment\' [POST]
     */
    async tagScoresIncrement(requestParameters: TagScoresIncrementRequest): Promise<void> {
        await this.tagScoresIncrementRaw(requestParameters);
    }

    /**
     * This will update a specific tag.
     * /tag/update [POST]
     */
    async tagUpdateRaw(requestParameters: TagUpdateRequest): Promise<runtime.ApiResponse<Tag>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tag/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagToJSON(requestParameters.tag),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * This will update a specific tag.
     * /tag/update [POST]
     */
    async tagUpdate(requestParameters: TagUpdateRequest): Promise<Tag> {
        const response = await this.tagUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will get a specific tag.
     * /tag/{tag} [GET]
     */
    async tagsSpecificTagSnapshotRaw(requestParameters: TagsSpecificTagSnapshotRequest): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling tagsSpecificTagSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tag/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * This will get a specific tag.
     * /tag/{tag} [GET]
     */
    async tagsSpecificTagSnapshot(requestParameters: TagsSpecificTagSnapshotRequest): Promise<Tag> {
        const response = await this.tagsSpecificTagSnapshotRaw(requestParameters);
        return await response.value();
    }

}

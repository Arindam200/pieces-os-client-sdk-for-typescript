/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Application,
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
    ConversationTypeEnum,
    ConversationTypeEnumFromJSON,
    ConversationTypeEnumFromJSONTyped,
    ConversationTypeEnumToJSON,
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    FlattenedAnchors,
    FlattenedAnchorsFromJSON,
    FlattenedAnchorsFromJSONTyped,
    FlattenedAnchorsToJSON,
    FlattenedAnnotations,
    FlattenedAnnotationsFromJSON,
    FlattenedAnnotationsFromJSONTyped,
    FlattenedAnnotationsToJSON,
    FlattenedAssets,
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
    FlattenedConversationMessages,
    FlattenedConversationMessagesFromJSON,
    FlattenedConversationMessagesFromJSONTyped,
    FlattenedConversationMessagesToJSON,
    GroupedTimestamp,
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    ReferencedModel,
    ReferencedModelFromJSON,
    ReferencedModelFromJSONTyped,
    ReferencedModelToJSON,
} from './';

/**
 * This is a flattend version of the Convsersation for DAG-Safety.
 * 
 * This will hold together a conversation. Ie allthe message within a conversation.
 * 
 * All the additional properties on here used on here like(anchors/assets) are used for context that will seed the conversation.
 * 
 * model is a calculated property, and will be the model of the last message sent if applicable.
 * @export
 * @interface FlattenedConversation
 */
export interface FlattenedConversation {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedConversation
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof FlattenedConversation
     */
    id: string;
    /**
     * This is a name that is customized.
     * @type {string}
     * @memberof FlattenedConversation
     */
    name?: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedConversation
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedConversation
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedConversation
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {boolean}
     * @memberof FlattenedConversation
     */
    favorited?: boolean;
    /**
     * 
     * @type {Application}
     * @memberof FlattenedConversation
     */
    application?: Application;
    /**
     * 
     * @type {FlattenedAnnotations}
     * @memberof FlattenedConversation
     */
    annotations?: FlattenedAnnotations;
    /**
     * 
     * @type {FlattenedConversationMessages}
     * @memberof FlattenedConversation
     */
    messages: FlattenedConversationMessages;
    /**
     * 
     * @type {ReferencedModel}
     * @memberof FlattenedConversation
     */
    model?: ReferencedModel;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof FlattenedConversation
     */
    assets?: FlattenedAssets;
    /**
     * 
     * @type {FlattenedAnchors}
     * @memberof FlattenedConversation
     */
    anchors?: FlattenedAnchors;
    /**
     * 
     * @type {ConversationTypeEnum}
     * @memberof FlattenedConversation
     */
    type: ConversationTypeEnum;
}

export function FlattenedConversationFromJSON(json: any): FlattenedConversation {
    return FlattenedConversationFromJSONTyped(json, false);
}

export function FlattenedConversationFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedConversation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': !exists(json, 'deleted') ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'favorited': !exists(json, 'favorited') ? undefined : json['favorited'],
        'application': !exists(json, 'application') ? undefined : ApplicationFromJSON(json['application']),
        'annotations': !exists(json, 'annotations') ? undefined : FlattenedAnnotationsFromJSON(json['annotations']),
        'messages': FlattenedConversationMessagesFromJSON(json['messages']),
        'model': !exists(json, 'model') ? undefined : ReferencedModelFromJSON(json['model']),
        'assets': !exists(json, 'assets') ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'anchors': !exists(json, 'anchors') ? undefined : FlattenedAnchorsFromJSON(json['anchors']),
        'type': ConversationTypeEnumFromJSON(json['type']),
    };
}

export function FlattenedConversationToJSON(value?: FlattenedConversation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'name': value.name,
        'created': GroupedTimestampToJSON(value.created),
        'updated': GroupedTimestampToJSON(value.updated),
        'deleted': GroupedTimestampToJSON(value.deleted),
        'favorited': value.favorited,
        'application': ApplicationToJSON(value.application),
        'annotations': FlattenedAnnotationsToJSON(value.annotations),
        'messages': FlattenedConversationMessagesToJSON(value.messages),
        'model': ReferencedModelToJSON(value.model),
        'assets': FlattenedAssetsToJSON(value.assets),
        'anchors': FlattenedAnchorsToJSON(value.anchors),
        'type': ConversationTypeEnumToJSON(value.type),
    };
}



"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
const Cloud_1 = require("../models/Cloud");
const Clouds_1 = require("../models/Clouds");
/**
 *
 */
class CloudsApi extends runtime.BaseAPI {
    /**
     * This will attempt to connect to a specific users cloud.(Required that the current user is logged in.)
     * /clouds/connect [POST]
     */
    async cloudsConnectNewCloudRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/clouds/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UserProfileToJSON)(requestParameters.userProfile),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, Cloud_1.CloudFromJSON)(jsonValue));
    }
    /**
     * This will attempt to connect to a specific users cloud.(Required that the current user is logged in.)
     * /clouds/connect [POST]
     */
    async cloudsConnectNewCloud(requestParameters) {
        const response = await this.cloudsConnectNewCloudRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will attempt to disconnect to a specific users cloud.
     * /clouds/disconnect [POST]
     */
    async cloudsDisconnectCloudRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/clouds/disconnect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, Cloud_1.CloudToJSON)(requestParameters.cloud),
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * This will attempt to disconnect to a specific users cloud.
     * /clouds/disconnect [POST]
     */
    async cloudsDisconnectCloud(requestParameters) {
        const response = await this.cloudsDisconnectCloudRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will attempt to reconnect to a users cloud. This will ensure that we are connected to a users cloud and will ensure that all the data associated with a user\'s cloud is up-to-date.
     * /clouds/reconnect [POST]
     */
    async cloudsReconnectCloudRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/clouds/reconnect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, Cloud_1.CloudToJSON)(requestParameters.cloud),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, Cloud_1.CloudFromJSON)(jsonValue));
    }
    /**
     * This will attempt to reconnect to a users cloud. This will ensure that we are connected to a users cloud and will ensure that all the data associated with a user\'s cloud is up-to-date.
     * /clouds/reconnect [POST]
     */
    async cloudsReconnectCloud(requestParameters) {
        const response = await this.cloudsReconnectCloudRaw(requestParameters);
        return await response.value();
    }
    /**
     * This is going to get a snapshot of all of the connected clouds.
     * /clouds [GET]
     */
    async cloudsSnapshotRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/clouds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, Clouds_1.CloudsFromJSON)(jsonValue));
    }
    /**
     * This is going to get a snapshot of all of the connected clouds.
     * /clouds [GET]
     */
    async cloudsSnapshot() {
        const response = await this.cloudsSnapshotRaw();
        return await response.value();
    }
}
exports.CloudsApi = CloudsApi;

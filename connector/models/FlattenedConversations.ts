/* tslint:disable */
/* eslint-disable */
/**
 * This is an open API that holds specific endpoints as a base for Pieces Context Systems
 * The point of this API is to allow us to organize and Auto Generate Code Specific for Connected Applications - this will allow for stateful context abstraction & less code within the Core Connector
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    ReferencedConversation,
    ReferencedConversationFromJSON,
    ReferencedConversationFromJSONTyped,
    ReferencedConversationToJSON,
} from './';

/**
 * Flattened version of conversations.
 * @export
 * @interface FlattenedConversations
 */
export interface FlattenedConversations {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedConversations
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Array<ReferencedConversation>}
     * @memberof FlattenedConversations
     */
    iterable: Array<ReferencedConversation>;
    /**
     * This is a Map<String, int> where the the key is an Conversation id.
     * @type {{ [key: string]: number; }}
     * @memberof FlattenedConversations
     */
    indices?: { [key: string]: number; };
}

export function FlattenedConversationsFromJSON(json: any): FlattenedConversations {
    return FlattenedConversationsFromJSONTyped(json, false);
}

export function FlattenedConversationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedConversations {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'iterable': ((json['iterable'] as Array<any>).map(ReferencedConversationFromJSON)),
        'indices': !exists(json, 'indices') ? undefined : json['indices'],
    };
}

export function FlattenedConversationsToJSON(value?: FlattenedConversations | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'iterable': ((value.iterable as Array<any>).map(ReferencedConversationToJSON)),
        'indices': value.indices,
    };
}



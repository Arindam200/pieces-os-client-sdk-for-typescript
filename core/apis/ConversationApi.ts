/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Conversation,
    ConversationFromJSON,
    ConversationToJSON,
    ConversationMessages,
    ConversationMessagesFromJSON,
    ConversationMessagesToJSON,
} from '../models';

export interface ConversationAssociateAnchorRequest {
    conversation: string;
    anchor: string;
}

export interface ConversationAssociateAssetRequest {
    conversation: string;
    asset: string;
}

export interface ConversationDeleteAnchorRequest {
    conversation: string;
    anchor: string;
}

export interface ConversationDeleteAssetRequest {
    conversation: string;
    asset: string;
}

export interface ConversationGetSpecificConversationRequest {
    conversation: string;
    transferables?: boolean;
}

export interface ConversationSpecificConversationMessagesRequest {
    conversation: string;
    transferables?: boolean;
}

export interface ConversationUpdateRequest {
    transferables?: boolean;
    conversation?: Conversation;
}

/**
 * 
 */
export class ConversationApi extends runtime.BaseAPI {

    /**
     * This will update both the anchor and the conversation.  and associate the 2 together
     * /conversation/{conversation}/anchors/associate/{anchor} [POST]
     */
    async conversationAssociateAnchorRaw(requestParameters: ConversationAssociateAnchorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateAnchor.');
        }

        if (requestParameters.anchor === null || requestParameters.anchor === undefined) {
            throw new runtime.RequiredError('anchor','Required parameter requestParameters.anchor was null or undefined when calling conversationAssociateAnchor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/anchors/associate/{anchor}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the anchor and the conversation.  and associate the 2 together
     * /conversation/{conversation}/anchors/associate/{anchor} [POST]
     */
    async conversationAssociateAnchor(requestParameters: ConversationAssociateAnchorRequest): Promise<void> {
        await this.conversationAssociateAnchorRaw(requestParameters);
    }

    /**
     * This will update both the asset and the conversation.  and associate the 2 together
     * /conversation/{conversation}/assets/associate/{asset} [POST]
     */
    async conversationAssociateAssetRaw(requestParameters: ConversationAssociateAssetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateAsset.');
        }

        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset','Required parameter requestParameters.asset was null or undefined when calling conversationAssociateAsset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/assets/associate/{asset}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the asset and the conversation.  and associate the 2 together
     * /conversation/{conversation}/assets/associate/{asset} [POST]
     */
    async conversationAssociateAsset(requestParameters: ConversationAssociateAssetRequest): Promise<void> {
        await this.conversationAssociateAssetRaw(requestParameters);
    }

    /**
     * This will update both the anchor and the conversation.  and delete(disacioate) the 2 together
     * /conversation/{conversation}/anchors/delete/{anchor} [POST]
     */
    async conversationDeleteAnchorRaw(requestParameters: ConversationDeleteAnchorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationDeleteAnchor.');
        }

        if (requestParameters.anchor === null || requestParameters.anchor === undefined) {
            throw new runtime.RequiredError('anchor','Required parameter requestParameters.anchor was null or undefined when calling conversationDeleteAnchor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/anchors/delete/{anchor}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the anchor and the conversation.  and delete(disacioate) the 2 together
     * /conversation/{conversation}/anchors/delete/{anchor} [POST]
     */
    async conversationDeleteAnchor(requestParameters: ConversationDeleteAnchorRequest): Promise<void> {
        await this.conversationDeleteAnchorRaw(requestParameters);
    }

    /**
     * This will update both the asset and the conversation.  and delete(disacioate) the 2.
     * /conversation/{conversation}/assets/delete/{asset} [POST]
     */
    async conversationDeleteAssetRaw(requestParameters: ConversationDeleteAssetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationDeleteAsset.');
        }

        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset','Required parameter requestParameters.asset was null or undefined when calling conversationDeleteAsset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/assets/delete/{asset}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will update both the asset and the conversation.  and delete(disacioate) the 2.
     * /conversation/{conversation}/assets/delete/{asset} [POST]
     */
    async conversationDeleteAsset(requestParameters: ConversationDeleteAssetRequest): Promise<void> {
        await this.conversationDeleteAssetRaw(requestParameters);
    }

    /**
     * This will get a specific conversation.
     * /conversation/{conversation} [GET]
     */
    async conversationGetSpecificConversationRaw(requestParameters: ConversationGetSpecificConversationRequest): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationGetSpecificConversation.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * This will get a specific conversation.
     * /conversation/{conversation} [GET]
     */
    async conversationGetSpecificConversation(requestParameters: ConversationGetSpecificConversationRequest): Promise<Conversation> {
        const response = await this.conversationGetSpecificConversationRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will get a specific conversations messages
     * /conversation/{conversation}/messages [GET]
     */
    async conversationSpecificConversationMessagesRaw(requestParameters: ConversationSpecificConversationMessagesRequest): Promise<runtime.ApiResponse<ConversationMessages>> {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation','Required parameter requestParameters.conversation was null or undefined when calling conversationSpecificConversationMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversation}/messages`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationMessagesFromJSON(jsonValue));
    }

    /**
     * This will get a specific conversations messages
     * /conversation/{conversation}/messages [GET]
     */
    async conversationSpecificConversationMessages(requestParameters: ConversationSpecificConversationMessagesRequest): Promise<ConversationMessages> {
        const response = await this.conversationSpecificConversationMessagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * This will update a specific conversation.
     * /conversation/update [POST]
     */
    async conversationUpdateRaw(requestParameters: ConversationUpdateRequest): Promise<runtime.ApiResponse<Conversation>> {
        const queryParameters: any = {};

        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversation/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationToJSON(requestParameters.conversation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * This will update a specific conversation.
     * /conversation/update [POST]
     */
    async conversationUpdate(requestParameters: ConversationUpdateRequest): Promise<Conversation> {
        const response = await this.conversationUpdateRaw(requestParameters);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OnboardedPersonaDetails,
    OnboardedPersonaDetailsFromJSON,
    OnboardedPersonaDetailsToJSON,
    PreonboardedPersonaDetails,
    PreonboardedPersonaDetailsFromJSON,
    PreonboardedPersonaDetailsToJSON,
    SegmentedTechnicalLanguage,
    SegmentedTechnicalLanguageFromJSON,
    SegmentedTechnicalLanguageToJSON,
    UnsegmentedTechnicalLanguage,
    UnsegmentedTechnicalLanguageFromJSON,
    UnsegmentedTechnicalLanguageToJSON,
} from '../models';

export interface PersonificationTechnicalLanguageGenerationRequest {
    preonboardedPersonaDetails?: PreonboardedPersonaDetails;
}

export interface SegmentTechnicalLanguageRequest {
    classify?: boolean;
    unsegmentedTechnicalLanguage?: UnsegmentedTechnicalLanguage;
}

/**
 * 
 */
export class MachineLearningApi extends runtime.BaseAPI {

    /**
     * This is going to take in some personification details ie languages & personas.  and will return generated Seeds that can be used as snippets post/pre onboarding.
     * /machine_learning/text/technical_language/generators/personification [GET]
     */
    async personificationTechnicalLanguageGenerationRaw(requestParameters: PersonificationTechnicalLanguageGenerationRequest): Promise<runtime.ApiResponse<OnboardedPersonaDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/machine_learning/text/technical_language/generators/personification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PreonboardedPersonaDetailsToJSON(requestParameters.preonboardedPersonaDetails),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OnboardedPersonaDetailsFromJSON(jsonValue));
    }

    /**
     * This is going to take in some personification details ie languages & personas.  and will return generated Seeds that can be used as snippets post/pre onboarding.
     * /machine_learning/text/technical_language/generators/personification [GET]
     */
    async personificationTechnicalLanguageGeneration(requestParameters: PersonificationTechnicalLanguageGenerationRequest): Promise<OnboardedPersonaDetails> {
        const response = await this.personificationTechnicalLanguageGenerationRaw(requestParameters);
        return await response.value();
    }

    /**
     * This is a functional endpoint that will parse a message or text in to text or code.  if the optional query param is passed along \'classify\' then we will optionally classify the just the code that is segmented.
     * /machine_learning/text/technical_language/parsers/segmentation [POST]
     */
    async segmentTechnicalLanguageRaw(requestParameters: SegmentTechnicalLanguageRequest): Promise<runtime.ApiResponse<SegmentedTechnicalLanguage>> {
        const queryParameters: any = {};

        if (requestParameters.classify !== undefined) {
            queryParameters['classify'] = requestParameters.classify;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/machine_learning/text/technical_language/parsers/segmentation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnsegmentedTechnicalLanguageToJSON(requestParameters.unsegmentedTechnicalLanguage),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SegmentedTechnicalLanguageFromJSON(jsonValue));
    }

    /**
     * This is a functional endpoint that will parse a message or text in to text or code.  if the optional query param is passed along \'classify\' then we will optionally classify the just the code that is segmented.
     * /machine_learning/text/technical_language/parsers/segmentation [POST]
     */
    async segmentTechnicalLanguage(requestParameters: SegmentTechnicalLanguageRequest): Promise<SegmentedTechnicalLanguage> {
        const response = await this.segmentTechnicalLanguageRaw(requestParameters);
        return await response.value();
    }

}

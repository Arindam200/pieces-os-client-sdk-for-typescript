/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    FlattenedAssets,
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
    FlattenedPersons,
    FlattenedPersonsFromJSON,
    FlattenedPersonsFromJSONTyped,
    FlattenedPersonsToJSON,
    GroupedTimestamp,
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    MechanismEnum,
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
    Score,
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
} from './';

/**
 * This is a specific model for related websites to an asset.[DAG SAFE]
 * @export
 * @interface FlattenedWebsite
 */
export interface FlattenedWebsite {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedWebsite
     */
    schema?: EmbeddedModelSchema;
    /**
     * this is aspecific uuid that represents
     * @type {string}
     * @memberof FlattenedWebsite
     */
    id: string;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof FlattenedWebsite
     */
    assets?: FlattenedAssets;
    /**
     * A customizable name.
     * @type {string}
     * @memberof FlattenedWebsite
     */
    name: string;
    /**
     * The true url or the website.
     * @type {string}
     * @memberof FlattenedWebsite
     */
    url: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedWebsite
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedWebsite
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedWebsite
     */
    deleted?: GroupedTimestamp;
    /**
     * This is a Map<String, MechanismEnum> where the the key is an asset id.
     * @type {{ [key: string]: MechanismEnum; }}
     * @memberof FlattenedWebsite
     */
    mechanisms?: { [key: string]: MechanismEnum; };
    /**
     * This is an optional value that will keep track of the number of times this has been interacted with.
     * @type {number}
     * @memberof FlattenedWebsite
     */
    interactions?: number;
    /**
     * 
     * @type {FlattenedPersons}
     * @memberof FlattenedWebsite
     */
    persons?: FlattenedPersons;
    /**
     * 
     * @type {Score}
     * @memberof FlattenedWebsite
     */
    score?: Score;
}

export function FlattenedWebsiteFromJSON(json: any): FlattenedWebsite {
    return FlattenedWebsiteFromJSONTyped(json, false);
}

export function FlattenedWebsiteFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedWebsite {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'assets': !exists(json, 'assets') ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'name': json['name'],
        'url': json['url'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': !exists(json, 'deleted') ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'mechanisms': !exists(json, 'mechanisms') ? undefined : (mapValues(json['mechanisms'], MechanismEnumFromJSON)),
        'interactions': !exists(json, 'interactions') ? undefined : json['interactions'],
        'persons': !exists(json, 'persons') ? undefined : FlattenedPersonsFromJSON(json['persons']),
        'score': !exists(json, 'score') ? undefined : ScoreFromJSON(json['score']),
    };
}

export function FlattenedWebsiteToJSON(value?: FlattenedWebsite | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'assets': FlattenedAssetsToJSON(value.assets),
        'name': value.name,
        'url': value.url,
        'created': GroupedTimestampToJSON(value.created),
        'updated': GroupedTimestampToJSON(value.updated),
        'deleted': GroupedTimestampToJSON(value.deleted),
        'mechanisms': value.mechanisms === undefined ? undefined : (mapValues(value.mechanisms, MechanismEnumToJSON)),
        'interactions': value.interactions,
        'persons': FlattenedPersonsToJSON(value.persons),
        'score': ScoreToJSON(value.score),
    };
}


